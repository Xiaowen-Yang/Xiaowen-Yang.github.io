<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/03/10/hello-world/"/>
      <url>/2025/03/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>About Closure</title>
      <link href="/2025/03/09/About%20closure/"/>
      <url>/2025/03/09/About%20closure/</url>
      
        <content type="html"><![CDATA[<p>I am recently studying the CS 61A (Computer Programming) course at UCB. I got really confused when I encountered higher-order functions for the first time. This is because I was introduced to λ-functions, and I didn’t understand a key concept in computer programming: <strong>closure</strong>. To help myself understand better, I wrote this post to clarify my thoughts.</p><h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><h3 id="What-is-a-closure"><a href="#What-is-a-closure" class="headerlink" title="What is a closure?"></a>What is a closure?</h3><p>A closure is an inner function that can remember some variables in the scope of its enclosing function (outer function), even after the enclosing function has finished calling.</p><h3 id="The-composition-of-a-closure"><a href="#The-composition-of-a-closure" class="headerlink" title="The composition of a closure"></a>The composition of a closure</h3><ol><li>Nested Function</li><li>The inner function <strong>references the variables</strong> of the outer function</li><li>The outer function <strong>return the inner function</strong>, rather than directly implementing it</li></ol><h3 id="Why-we-need-a-closure"><a href="#Why-we-need-a-closure" class="headerlink" title="Why we need a closure?"></a>Why we need a closure?</h3><p>We all know that when we call a function, we create a frame. Then, when we implement then function and return, the frame is destroyed. That is, we left nothing.</p><p>Therefore, when we want to hold on some variables even after the function has destroyed, we need a closure. A closure is a persistent local variable scope. It gives us function portability.</p><h2 id="A-simple-example"><a href="#A-simple-example" class="headerlink" title="A simple example"></a>A simple example</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">y</span>):</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    <span class="keyword">return</span> inner <span class="comment"># Return a closure</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = outter(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">sum</span>(<span class="number">5</span>)</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><ul><li>When we call <code>outter (1)</code>, we have <code>x = 1</code> in the outter frame, define function <code>inner(y)</code> and return this function as a closure.</li><li>Then, <code>sum</code> is the return function <code>inner(y)</code> ,<code>sum(5)</code>means <code>inner(5)</code></li><li>Lastly, return <code>x + y</code>,that is 1+5, the result is 6</li></ul><p>The term closure is often used as a synonym for <strong>anonymous function (lambda expression)</strong>.</p><h2 id="lambda-expression"><a href="#lambda-expression" class="headerlink" title="lambda expression"></a>lambda expression</h2><p>Most of time, when we want to define a new function, we needed to give it a name. But for other types of expressions, we don’t need to associate intermediate values with a name.  That is anonymous function.</p><h3 id="What-is-a-lambda-expression"><a href="#What-is-a-lambda-expression" class="headerlink" title="What is a lambda expression?"></a>What is a lambda expression?</h3><p>A lambda expression evaluates to a function that has <strong>a single return expression as its body</strong>. Assignment and <strong>control statements are not allowed</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;A common define&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>): </span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"><span class="comment">#square is a name</span></span><br><span class="line"></span><br><span class="line">======================================</span><br><span class="line"><span class="string">&quot;&quot;&quot;A lambda expression&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">lambda</span> x: x * x</span><br><span class="line"><span class="comment"># must a single expression after:</span></span><br><span class="line"><span class="comment"># no return keywork</span></span><br><span class="line"><span class="comment"># no name</span></span><br></pre></td></tr></table></figure><h3 id="Same-function-as-the-previous-simple-example"><a href="#Same-function-as-the-previous-simple-example" class="headerlink" title="Same function as the previous simple example"></a>Same function as the previous simple example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> y: x + y <span class="comment">#return a closure</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = outter(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">sum</span>(<span class="number">5</span>)</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>An analogy of closure in life. You have a bag containing food and you hire a chef who can use the food to cook. One day, you send the chef out with the bag, and the chef can cook with the food in the bag.</p>]]></content>
      
      
      <categories>
          
          <category> Computer Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -lambda function </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
